## @section CTFd configuration parameters
## CTFd is configured using environment variables
## Official documentation : https://docs.ctfd.io/docs/deployment/configuration
##

security:
  sessionCookie:
    httpOnly: true
    sameSite: "Lax"
  permanentSessionLifetime: 604800
mail:
  addressFrom: ""
  smtp:
    enabled: false
    server: ""
    port: 465
    useAuth: false
    username: ""
    password: ""
    tls: true
    ssl: false
    addressSender: ""
    ## @param mail.smtp.existingSecret the name of an existing secret with smtpUsername and smtpPassword keys
    ##
    existingSecret: ""
  mailgun:
    enabled: false
    apiKey: ""
    baseUrl: ""
    ## @param mail.mailgun.existingSecret the name of an existing secret with a mailgunApiKey key
    ##
    existingSecret: ""
logFolder: ""
optional:
  reverseProxy: true
  themeFallback: true
  swaggerUi: false
  updateCheck: true
  serverSentEvents: true
  htmlSanitization: false
  sqlAlchemy:
    trackModifications: false
    maxOverflow: ""
    poolPrePing: ""
  safeMode: false
oauth:
  enabled: false
  clientId: ""
  clientSecret: ""
  existingSecret: ""

## @section Configuration
## @param httpPort The http port the CTFd container listens on
httpPort: 8000

## @section CTFd image parameters
##

image:
  image: "ghcr.io/ctfd/ctfd:3.5.1"
  pullSecret: ""
  pullPolicy: IfNotPresent

## @section CTFd deployment parameters
##

replicaCount: 1

## @section CTFd service parameters
##

service:
  type: ClusterIP
  port: 80

## @section CTFd ingress parameters
##

ingress:
  enabled: true
  hostname: example.com
  annotations: {}

## @section Database Parameters
##

## MariaDB chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/mariadb/values.yaml
##
mariadb:
  ## @param mariadb.enabled Deploy a MariaDB server to satisfy the applications database requirements
  ## To use an external database set this to false and configure the `externalDatabase.*` parameters
  ## If neither this nor `externalDatabase.enabled` is set, CTFd will use a temporary SQLite database as a fallback
  ##
  enabled: true
  ## @param mariadb.architecture MariaDB architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone
  ## MariaDB Authentication parameters. If passwords are not provided, they will be generated randomly.
  ## @param mariadb.auth.rootPassword MariaDB root password
  ## @param mariadb.auth.database MariaDB custom database
  ## @param mariadb.auth.username MariaDB custom username
  ## @param mariadb.auth.password MariaDB custom user password
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-the-root-password-on-first-run
  ##      https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-on-first-run
  ##      https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-user-on-first-run
  ##
  auth:
    createDatabase: true
    database: "ctfd"
    username: "ctfd"
  ## MariaDB Primary configuration
  ##
  primary:
    ## MariaDB Primary Persistence parameters
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ## @param mariadb.primary.persistence.enabled Enable persistence on MariaDB using PVC(s)
    ## @param mariadb.primary.persistence.storageClass Persistent Volume storage class
    ## @param mariadb.primary.persistence.accessModes [array] Persistent Volume access modes
    ## @param mariadb.primary.persistence.size Persistent Volume size
    ##
    persistence:
      enabled: true
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 8Gi

## External database configuration
## These values are ignored unless mariadb.enable is set to false
##
externalDatabase:
  ## @param externalDatabase.enabled Whether to use an external database
  ## CTFd will default to a temporary sqlite database if non is provided
  ##
  enabled: false
  ## @param externalDatabase.protocol Protocol schema to use when connecting to the external database
  ##
  protocol: "mysql+pymysql"
  ## @param externalDatabase.host External Database server host
  ##
  host: "localhost"
  ## @param externalDatabase.port External Database server port
  ##
  port: 3306
  ## @param externalDatabase.user External Database username
  ##
  user: "ctfd"
  ## @param externalDatabase.password External Database user password
  ##
  password: ""
  ## @param externalDatabase.database External Database database name
  ##
  database: "ctfd"
  ## @param externalDatabase.existingSecret The name of an existing secret with database credentials. Evaluated as a template
  ## NOTE: Must contain key `mariadb-password`
  ## NOTE: When it's set, the `externalDatabase.password` parameter is ignored
  ##
  existingSecret: ""

redis:
  enabled: true
  architecture: standalone

externalRedis:
  enabled: false
  protocol: "redis"
  host: "localhost"
  port: 6379
  user: ""
  index: ""
  password: ""
  existingSecret: ""

externalS3:
  enabled: false
  endpoint: s3.amazonaws.com
  region: us-east-1
  bucket: ctfd
  accessKey: ""
  secretKey: ""
  existingSecret: ""

## @section CTFd security contexts
##

## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enabled CTFd pods' Security Context
## @param podSecurityContext.fsGroup Set CTFd pod's Security Context fsGroup
## @param podSecurityContext.seccompProfile.type Set CTFd container's Security Context seccomp profile
##
podSecurityContext:
  enabled: true
  fsGroup: 1001
  seccompProfile:
    type: "RuntimeDefault"

## Configure Container Security Context (only main container)
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled Enabled CTFd containers' Security Context
## @param containerSecurityContext.runAsUser Set CTFd container's Security Context runAsUser
## @param containerSecurityContext.runAsNonRoot Set CTFd container's Security Context runAsNonRoot
## @param containerSecurityContext.allowPrivilegeEscalation Set CTFd container's privilege escalation
## @param containerSecurityContext.capabilities.drop Set CTFd container's Security Context runAsNonRoot
##
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]

## @section CTFd probes parameters
## Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
##

## Startup probe parameters
## @param enabled whether to enable the probe
## Other parameters are interpreted as the probe's YAML template
##
startupProbe:
  enabled: false
  httpGet:
    path: /
    port: 'http'
  initialDelaySeconds: 5
  periodSeconds: 3

## Readiness probe parameters
## @param enabled whether to enable the probe
## Other parameters are interpreted as the probe's YAML template
##
readinessProbe:
  enabled: true
  httpGet:
    path: /
    port: 'http'
  initialDelaySeconds: 10
  periodSeconds: 3

## Liveness probe parameters
## @param enabled whether to enable the probe
## Other parameters are interpreted as the probe's YAML template
##
livenessProbe:
  enabled: true
  httpGet:
    path: /
    port: 'http'
  initialDelaySeconds: 10
  periodSeconds: 3