stages:
  - dependencies
  - lint
  - update
  - build
  - publish

build dependencies:
  stage: dependencies
  image: alpine/helm:3.10.1
  script:
    - helm dependencies build
  artifacts:
    name: dependencies
    paths:
      - charts/*
      - Chart.lock
  rules:
    - when: on_success

lint:
  stage: lint
  image: alpine/helm:3.10.1
  script:
    - helm lint
  needs:
    - build dependencies
  rules:
    - when: on_success

verify values.yaml annotations:
  stage: lint
  image: alpine/helm:3.10.1
  before_script:
    - apk update
    - apk add npm
    - npm install -g @bitnami/readme-generator-for-helm
  script:
    - readme-generator --values values.yaml --readme README.md --schema "/tmp/schema.json"
  needs: []
  rules:
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: on_success
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - changes:
        - values.yaml # If it has changed, we will push the updated Readme instead
      when: never

update readme:
  stage: update
  image: alpine
  before_script:
    - apk update
    - apk add git npm openssh-client curl
    - npm install -g @bitnami/readme-generator-for-helm
    - git config --global user.name "HackademINT CI"
    - git config --global user.email "ci@hackademint.org"
    - mkdir -p ~/.ssh
    - mv ${CI_PUSH_KEY} ~/.ssh/id_ecdsa
    - chmod 600 ~/.ssh/id_ecdsa
    - ssh-keyscan -p ${CI_SERVER_SHELL_SSH_PORT} ${CI_SERVER_SHELL_SSH_HOST} >> ~/.ssh/known_hosts
    - git clone "ssh://git@${CI_SERVER_SHELL_SSH_HOST}:${CI_SERVER_SHELL_SSH_PORT}/${CI_PROJECT_PATH}.git" "${CI_COMMIT_SHA}"
  script:
    - cd ${CI_COMMIT_SHA}
    - git switch ${CI_COMMIT_BRANCH}
    - readme-generator --values values.yaml --readme README.md --schema "/tmp/schema.json"
    - |-
      CHANGES=$(git status --porcelain | wc -l)
      if [ "$CHANGES" -gt "0" ]
        then
          git add README.md
          git status
          git commit -m "CI bot: Update README.md from values.yaml"
          git push
        else
          echo "No changes to commit, triggering another job"
          curl --request POST \
               --fail \
               --form token=${FAILED_PUSH_PIPELINE_TRIGGER} \
               --form ref=${CI_COMMIT_REF_NAME} \
               "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/trigger/pipeline"
      fi
  needs:
    - lint
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: never
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      when: never # We let the commit job deal with it
    - changes:
        - values.yaml
      when: on_success
    - when: never

package chart:
  stage: build
  image: alpine/helm:3.10.1
  script:
    - helm package .
  needs:
    - build dependencies
    - lint
  artifacts:
    name: Helm package
    paths:
      - "*.tgz"
  rules:
    - when: on_success

publish to gitlab packages:
  stage: publish
  image: curlimages/curl:latest
  script:
    - |
      if [[ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]];
      then
        CHANNEL="unstable"
      else
        CHANNEL="stable"
      fi
    - PACKAGE=$(ls *.tgz);
    - >- 
      curl --request POST 
      --user gitlab-ci-token:$CI_JOB_TOKEN 
      --form "chart=@${PACKAGE}" 
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"
  needs:
    - package chart
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: on_success
    - changes:
        - values.yaml
      when: never
    - when: on_success

publish to gitlab registry:
  stage: publish
  image: alpine/helm:3.10.1
  script:
    - PACKAGE=$(ls *.tgz);
    - helm registry login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - helm push ${PACKAGE} oci://${CI_REGISTRY_IMAGE}
  needs:
    - package chart
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - changes:
        - values.yaml
      when: never
    - when: never

publish to docker hub:
  stage: publish
  image: alpine/helm:3.10.1
  script:
    - PACKAGE=$(ls *.tgz);
    - echo ${DOCKER_HUB_TOKEN} | helm registry login registry-1.docker.io -u hackademint --password-stdin
    - helm push ${PACKAGE} oci://registry-1.docker.io/hackademint
  needs:
    - package chart
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - changes:
        - values.yaml
      when: never
    - when: never