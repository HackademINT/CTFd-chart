stages:
  - dependencies
  - lint
  - update
  - build
  - publish

build dependencies:
  stage: dependencies
  image: alpine/helm:3.10.1
  script:
    - helm dependencies build
  artifacts:
    name: dependencies
    paths:
      - charts/*
      - Chart.lock

lint:
  stage: lint
  image: alpine/helm:3.10.1
  script:
    - helm lint
  needs:
    - build dependencies

verify values.yaml annotations:
  stage: lint
  image: alpine/helm:3.10.1
  before_script:
    - apk update
    - apk add npm
    - npm install -g @bitnami/readme-generator-for-helm
  script:
    - readme-generator --values values.yaml --readme Readme.md --schema "/tmp/schema.json"
  needs: []
  except:
    changes:
      - values.yaml # If it has changed, we will push the updated Readme instead

update readme:
  stage: update
  image: alpine
  before_script:
    - apk update
    - apk add git npm openssh-client
    - npm install -g @bitnami/readme-generator-for-helm
    - git config --global user.name "HackademINT CI"
    - git config --global user.email "ci@hackademint.org"
    - mkdir -p ~/.ssh
    - mv ${CI_PUSH_KEY} ~/.ssh/id_ecdsa
    - chmod 600 ~/.ssh/id_ecdsa
    - ssh-keyscan -p ${CI_SERVER_SHELL_SSH_PORT} ${CI_SERVER_SHELL_SSH_HOST} >> ~/.ssh/known_hosts
    - git clone "ssh://git@${CI_SERVER_SHELL_SSH_HOST}:${CI_SERVER_SHELL_SSH_PORT}/${CI_PROJECT_PATH}.git" "${CI_COMMIT_SHA}"
  script:
    - cd ${CI_COMMIT_SHA}
    - git switch ${CI_COMMIT_BRANCH}
    - readme-generator --values values.yaml --readme Readme.md --schema "/tmp/schema.json"
    - git add Readme.md
    - 'git commit -m "CI bot: Update Readme.md from values.yaml"'
    - git push
  needs:
    - lint
  only:
    changes:
      - values.yaml

package chart:
  stage: build
  image: alpine/helm:3.10.1
  script:
    - helm package .
  needs:
    - build dependencies
    - lint
  artifacts:
    name: Helm package
    paths:
      - "*.tgz"

publish to gitlab packages:
  stage: publish
  image: curlimages/curl:latest
  script:
    - |
      if [[ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]];
      then
        CHANNEL="unstable"
      else
        CHANNEL="stable"
      fi
    - PACKAGE=$(ls *.tgz);
    - >- 
      curl --request POST 
      --user gitlab-ci-token:$CI_JOB_TOKEN 
      --form "chart=@${PACKAGE}" 
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/${CHANNEL}/charts"
  needs:
    - package chart
  except:
    changes:
      - values.yaml

publish to gitlab registry:
  stage: publish
  image: alpine/helm:3.10.1
  script:
    - PACKAGE=$(ls *.tgz);
    - helm registry login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - helm push ${PACKAGE} oci://${CI_REGISTRY_IMAGE}
  needs:
    - package chart
  only:
    - tags
  except:
    changes:
      - values.yaml

publish to docker hub:
  stage: publish
  image: alpine/helm:3.10.1
  script:
    - PACKAGE=$(ls *.tgz);
    - echo ${DOCKER_HUB_TOKEN} | helm registry login registry-1.docker.io -u hackademint --password-stdin
    - helm push ${PACKAGE} oci://registry-1.docker.io/hackademint
  needs:
    - package chart
  only:
    - tags
  except:
    changes:
      - values.yaml